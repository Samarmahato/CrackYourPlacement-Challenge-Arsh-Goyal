
Given the head of a sorted linked list, delete all duplicates such that each element appears only once. Return the linked list sorted as well.

 

Example 1:


Input: head = [1,1,2]
Output: [1,2]




















/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* deleteDuplicates(ListNode* head) {
       ListNode*temp= head;
        
        if(head==NULL || head->next==NULL)
            return head;
        
     while(head->next!=NULL){
         if(head->val==head->next->val){
           head->next=head->next->next;
         }else{
             head=head->next;
         }
     }   
        
        return temp;
        
        
        
        
        
        
        
        
    }
};
