vector<int> ans;
        int row = matrix.size();
        int col = matrix[0].size();
        
        int count = 0;
        int total = row*col;
        
        //index initialisation
        int startingRow = 0;
        int startingCol = 0;
        int endingRow = row-1;
        int endingCol = col-1;
        
        
        while(count < total) {
            
            //print starting row
            for(int index = startingCol; count < total && index<=endingCol; index++) {
                ans.push_back(matrix[startingRow][index]);
                count++;
            }
            startingRow++;
            
            //print ending column
            for(int index = startingRow; count < total && index<=endingRow; index++) {
                ans.push_back(matrix[index][endingCol]);
                count++;
            }
            endingCol--;
            
            //print ending row
            for(int index = endingCol; count < total && index>=startingCol; index--) {
                ans.push_back(matrix[endingRow][index]);
                count++;
            }
            endingRow--;
            
            //print starting column
            for(int index = endingRow; count < total && index>=startingRow; index--) {
                ans.push_back(matrix[index][startingCol]);
                count++;
            }
            startingCol++;
        } 
        return ans;

        
    }
};
*********************************************************************************************************************************************

class Solution {
public:
    vector<int> spiralOrder(vector<vector<int>>& matrix) {
       // vector<vector<int>> ans(matrix, vector<int> (matrix, 1));
//         int n=matrix.size();
//         int ans[n];
//         int left = 0,right = matrix.size()-1, top = 0, down = matrix.size()-1,  index = 1;
        
//         while (left <= right && top <= down) {
//             //first row
//             for (int j = left; j <= right; j++) {
//                 ans[top][j] = index;
//                 index++;
//             }
                
//             top++;
            
//             //last col
//             for (int i = top; i <= down; i++) {
//                 ans[i][right] = index;
//                 index++;
//             }
            
//             right--;
            
//             //last row
//             for (int j = right; j >= left; j--) {
//                 ans[down][j] = index;
//                 index++;
//             }
            
//             down--;
            
//             //first col
//             for (int i = down; i >= top; i--) {
//                 ans[i][left] = index;
//                 index++;
//             }
            
//             left++;
//         }
//         return ans;
     
//     }
    //     {
        int top = 0;
        int down =  matrix.size() - 1;
        int left = 0;
        int right =  matrix[0].size() - 1;
        vector<int> ans;
        
        while (left <= right && top <= down)
        {
            if (left <= right && top <= down)
            {
                for (int i = left; i <= right; i++)
                {
                    ans.push_back( matrix[top][i]);
                    
                }
                top++;
            }

            if (left <= right && top <= down)
            {
                for (int i = top; i <= down; i++)
                {
                    ans.push_back( matrix[i][right]);
                   
                }
                right--;
            }

            if (left <= right && top <= down)
            {
                for (int i = right; i >= left; i--)
                {
                    ans.push_back( matrix[down][i]);
                   
                }
                down--;
            }
            if (left <= right && top <= down)
            {
                for (int i = down; i >= top; i--)
                {
                    ans.push_back( matrix[i][left]);
                   
                }
                left++;
            }
        }
        return ans;
    }
};





















