Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.

 

Example 1:

Input: n = 3
Output: ["((()))","(()())","(())()","()(())","()()()"]
Example 2:

Input: n = 1
Output: ["()"]



class Solution {
public:
   // vector<string> generateParenthesis(int n) {
         //Function to creat the balanced parenthesisi
    void balancedParenthsis(int n, int open, int close, string str, vector<string> &ans)
    {
        //if the open and close is equal to the given value
        if(open == n && close == n)
            ans.push_back(str);
        //if the open is less the n then increase the open and add ( int string
        if(open < n)
            balancedParenthsis(n, open+1, close, str + "(", ans);
        //if close is less then increase the cont of close and add ) this into string
        if(close < open)
            balancedParenthsis(n, open, close+1, str + ")", ans);
    }
    //Main function to generate all the parenthesis
    vector<string> generateParenthesis(int n) {
        vector<string> ans;
        string str = "";
        balancedParenthsis(n, 0, 0, str, ans);
        return ans;
    }
    
};
