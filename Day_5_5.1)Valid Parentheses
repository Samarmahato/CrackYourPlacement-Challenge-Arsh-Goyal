Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
 

Example 1:

Input: s = "()"
Output: true
Example 2:

Input: s = "()[]{}"
Output: true
Example 3:

Input: s = "(]"
Output: false

/*************************************************************************/

class Solution {
public:
    bool isValid(string s) {
        stack<char> st;  
    int back_count =0;    
    for(int i=0;i<s.length();i++){
        if(s[i]=='(' || s[i]=='{' || s[i]=='[')
             st.push(s[i]);
        if(s[i]==')' || s[i]=='}' || s[i]==']')
        {
            back_count++;
            
            if(st.empty())
                return false;
            
            char ch = st.top();
            
            if(ch=='(' && s[i]==')' || ch == '{' && s[i]=='}' || ch == '[' && s[i]==']') 
            {st.pop(); back_count--;}
            
            else
                return false;
        }
        }
        
        if(!st.empty() || back_count!=0)
            return false;
        
        return true;
    }
};
